
#include "nt_window.h"

/**
 * 创建tcp 连接, 应用于tcp客户端的时候
 */
void main_window::create_tcp_client(QString ip, quint16 port)
{
    tcp_client = new nt_socket();

    tcp_client->tcp_client_connection(ip, port);

    connect(tcp_client, SIGNAL(nt_successful(nt_session_t *)), this, SLOT(update_status_connected(nt_session_t *)));
    connect(tcp_client, SIGNAL(nt_disconnected(QString)), this, SLOT(update_status_disconnected(QString)));
    connect(tcp_client, SIGNAL(nt_recv(nt_session_t *)), this, SLOT(show_data_handle(nt_session_t *)));

    connect(tcp_client, SIGNAL(nt_recv_count(nt_session_t *)), this, SLOT(update_count_recv(nt_session_t *)));
    connect(tcp_client, SIGNAL(nt_send_count(nt_session_t *)), this, SLOT(update_count_send(nt_session_t *)));

}


int main_window::create_tcp_listen(QString ip, quint16 port)
{
    //tcp
    tcp_server = new nt_server();

    connect(tcp_server, SIGNAL(nt_listen_successful(QString)), this, SLOT(tcp_listen_successful(QString)));         //监听成功
    connect(tcp_server, SIGNAL(nt_listen_failed(QString)), this, SLOT(tcp_listen_failed(QString)));                 //新的连接
    connect(tcp_server, SIGNAL(nt_new_connected(nt_session_t *)), this, SLOT(tcp_new_connected(nt_session_t *)));       //监听失败
    connect(tcp_server, SIGNAL(nt_disconnected(QString)), this, SLOT(update_status_disconnected(QString)));

    connect(tcp_server, SIGNAL(nt_recv(nt_session_t *)), this, SLOT(show_data_handle(nt_session_t *)));
    connect(tcp_server, SIGNAL(nt_recv_count(nt_session_t *)), this, SLOT(update_count_recv(nt_session_t *)));
    connect(tcp_server, SIGNAL(nt_send_count(nt_session_t *)), this, SLOT(update_count_send(nt_session_t *)));

    connect(tcp_server, SIGNAL(nt_con_count(int)), this, SLOT(update_count_con(int)));

    return (tcp_server->create_tcp_listen(ip, port));
}

void main_window::tcp_listen_successful(QString msg)
{
    statusBar()->showMessage(msg);
}

void main_window::tcp_listen_failed(QString msg)
{
    qDebug() << "Now in tcp_listen_failed";
    statusBar()->showMessage(msg);

    delete tcp_server;

    start_button->setText("打开");
    start_button->repaint();
}


void main_window::tcp_new_connected(nt_session_t *session)
{
    //新会话插入hash表
    session_hash->insert(session->session_key, session);

    statusBar()->showMessage(session->status_msg);

    //更新源地址显示
    peer_box->addItem(session->session_key);
    peer_box->repaint();

}

/*
 * UDP ----------------------------------------------------------------------------
 */
void main_window::create_udp_client(QString ip, quint16 port)
{
    tcp_client = new nt_socket();

    tcp_client->tcp_client_connection(ip, port);

    connect(tcp_client, SIGNAL(nt_successful(nt_session_t *)), this, SLOT(update_status_connected(nt_session_t *)));
    connect(tcp_client, SIGNAL(nt_disconnected(QString)), this, SLOT(update_status_disconnected(QString)));
    connect(tcp_client, SIGNAL(nt_recv(nt_session_t *)), this, SLOT(show_data_handle(nt_session_t *)));

    connect(tcp_client, SIGNAL(nt_recv_count(nt_session_t *)), this, SLOT(update_count_recv(nt_session_t *)));
    connect(tcp_client, SIGNAL(nt_send_count(nt_session_t *)), this, SLOT(update_count_send(nt_session_t *)));

}
